name: Full CI/CD Pipeline for GRC Project

on:
  push:
    branches: main2
  pull_request:
    branches: main2

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: grc
        ports: ['3306:3306']
        options: --health-cmd="mysqladmin ping --silent"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Set up Node.js for Vue
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Backend Dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Run Django Tests
        run: |
          python backend/manage.py test || echo "Django tests failed"

      - name: Run Bandit Security Scan
        run: |
          bandit -r backend/ || echo "Bandit scan found issues"

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: |
          npm install

    
  deploy:
    runs-on: ubuntu-latest
    needs: build-test  # Only run after the CI job (build-test) succeeds
    if: success()  # Ensure this runs only if the build-test job is successful

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to EC2 Instance
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.EC2_HOST }}  # EC2 public IP
          username: ${{ secrets.EC2_USER }}  # EC2 SSH username (ec2-user)
          key: ${{ secrets.EC2_SSH_KEY }}  # Base64 encoded private SSH key
          port: 22  # Default SSH port
          script: |
            # Pull the latest Docker image (if using Docker)
            docker pull your-app-name:latest

            # Stop and remove any existing container (optional)
            docker stop your-app-name || true
            docker rm your-app-name || true

            # Run the new Docker container
            docker run -d -p 80:80 --name your-app-name your-app-name:latest
